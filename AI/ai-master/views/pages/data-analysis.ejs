<% var bodyClass = bodyClass %>
<!DOCTYPE html>
<html lang="en">
<head>
  <% include ../partials/head.ejs %>
  <link rel="stylesheet" type="text/css" href="/js/image-picker/image-picker.css">
  <script src='https://www.google.com/recaptcha/api.js'></script>
  <script src="/js/image-picker/image-picker.js"></script>
</head>

<body class="<%= bodyClass %>">

<div class="container">
  <br/>
  <h2 id="api-service-title"></h2>
  <br>
  <p>Greetings human. <span id="api-service-desc"></span></p>
  <br/>
  <form id="analysisForm">
      <% if (apiContentType == "text") { %>

      <fieldset>
          <legend style="font-size: 95%;">Select a sample sentence/paragraph or enter one in the field below</legend>
          <p style="margin-left: 1rem;" id="formSampleFields"></p>

      <% if (xtra != undefined && xtra.type != "none") { %>
          <p style="margin-left: 1rem;" id="formXtraFields"><%= xtra.label %> </p>
      <% }  %>

      </fieldset>
      <br>
      <div class="g-recaptcha" data-sitekey="<%= recaptchaSiteKey %>"></div>
      <textarea cols="60" rows="4" wrap="true" name="phrase"></textarea>
      <br/>
      <% } else { %>

          <P>Select a sample image...</p>

          <select class="image-picker show-labels show-html">
            <option value=""></option>
          </select>
          <P>or upload and select a file to analyze:</p><p>
          <object id="file-object"></object>
          <div id="file-result"></div>
          <P>JPEG is the supported image format.</p>

        <% } %>
      <input id="sendData" type="submit" value="Analyze">
  </form>

<br/><br/>
  <div id="resultsDiv">
  </div>
  <br/>
  <br/>
  <div id="resultsNotes" class='alert alert-info text-left start-hidden' role='alert'>
    <p><b>Notes</b></p>
    <ul>
      <li>Results are loaded asynchronously for each service.</li>
      <li>Click on <i>API Name</i> to see the raw JSON API response.</li>
      <li><i>Result</i> is an attempt combined and normalized measure to compare results. However, please note that the API results have varying ranges and accuracy, so refer to the actual API JSON response for a more detailed comparison.</li>
      <li><i>Total request time</i> (milliseconds) is the roundtrip time for the call from client to server, and includes the API time.</li>
      <li><i>API Time</i> (milliseconds) is the server-side roundtrip time for the API call, and as such a more accurate measure of API performance.</li>
    </ul>
  </div>

</div>


<script>
var spinnerHTML = "<div class='rect1'></div> <div class='rect2'> </div> <div class='rect3'></div> <div class='rect4'></div> <div class='rect5'></div>";

function toggleVisibleRow(divname) {

  var divRefNameClick = divname+"-click";
  var divRefNameArrow = divname+"-arrow";
  var divJsonName = divname+"-json";

  $("#table-centered ."+divJsonName).toggle();

  var isJSONVisible = $("#table-centered ."+divJsonName).is(':visible');

  //if JSON is visible switch the arrow from pointing left to pointing down
  var currentClass = isJSONVisible
                            ? "glyphicon-triangle-right"
                            : "glyphicon-triangle-bottom";
  var newClass = isJSONVisible
                    ? "glyphicon-triangle-bottom"
                    : "glyphicon-triangle-right";

  $("#table-centered #"+divRefNameArrow)
    .removeClass(currentClass)
    .addClass(newClass);
}

function insertTextSamples(apiServiceInfo) {

  var presetValues = apiServiceInfo.testSamples;

  for (i in presetValues) {
    var preset = presetValues[i];
    var presetValue = preset.value;
    var presetDisplayText = (preset.displayText != undefined) ? preset.displayText : presetValue;
    var text = "<input type='radio' name='presetPhrase' value=\""+presetValue+"\"><span style='font-size: 95%;'>";
    text += "&nbsp;&nbsp;&ldquo;"+presetDisplayText+"&rdquo;</span><br/>";
    $("#formSampleFields").append(text) ;
  }

  var xtraField =  apiServiceInfo.xtra;
  var xFieldId = $("#formXtraFields");
  if (xFieldId != undefined && xtraField != undefined) {
    var newfield = "<select name=\"xtra\">"
    var newfieldValues = xtraField.options.split(",");
    for (i in newfieldValues) {
      value = newfieldValues[i];
      newfield += "<option value=\""+value+"\">"+value+"</option>";
  }
  newfield += "</select>";
  $("#formXtraFields").append(newfield) ;
}

  var rad = $("#analysisForm").find("input[name='presetPhrase']");

  jQuery.each(rad, function (idx, field) {
      field.onclick = function() {
        $("#analysisForm").find("textarea[name='phrase']").val(field.value);
      }
  });
}

function insertImageSamples(apiServiceInfo) {
    var sampleData = apiServiceInfo.sampleImages;
    for (var i=0; i<sampleData.length; ++i) {
      var data = sampleData[i];
      var str = "<option data-img-class='pickerImage' data-img-src=\""+data.dataURI+"\" value=\""+(i+1)+"\">"+data.name+"</option>";
      $("select").append(str);
    }
    $("select").imagepicker(
      {
        selected: function(select, picker_option, evt) {
          var selectedImage = sampleData[select.value()-1];
          showResult(selectedImage);
         }
      }
    );


      $('#file-object').replaceWith('<input type="file" id="file-object" value="Load a file" />');
      $('#file-object').on('change', function(e) {
        var files = e.target.files,file;

        if (!files || files.length == 0) return;
        file = files[0];
        //format of 'file' object File {name: "crazy-signs-notice.jpg", lastModified: 1475855109000, size: 44346, type: "image/jpeg", slice: function}
        if (file.size > (1024 * 1024)) {
          alert('Image file is too big. Please select an image of less than 1 MB.');
          return;
        }
        if (file.type != "image/jpeg") {
          alert('Image must be in the JPEG format.');
         return;
        }
        var fileInfo = {
          name: file.name,
          lastModified: file.lastModified,
          size: file.size,
          type: file.type,
        }
        var fileReader = new FileReader();
        fileReader.onload = function (e) {
          fileInfo.dataURI = e.target.result;
          showResult(fileInfo);
        };
        fileReader.onerror = function (e) {
          alert("Sorry, there was a problem reading the file you selected. Please try again or select another file.");
        };
        fileReader.readAsDataURL(file);
      });
};


//this eventually gets filled with an object that contains dataURI, name and possibly other attributes
var imageToAnalyze = Object.create(null);

// fileInfo can contain name: "myimage.jpg", lastModified: 1475855109000, size: 44346, type: "image/jpeg"
function showResult(imageInfo) {
  imageToAnalyze = imageInfo;
  var imgHtml = imageHTMLFromInfo(imageInfo);
  $('#file-result').empty();
  $('#file-result').html(imgHtml);
}

function imageHTMLFromInfo(imageInfo) {
    return "<img class=\"pickedImage\" src=\""+imageInfo.dataURI+"\" /><br/>Name: "+imageInfo.name;
}

var apiList = <%- JSON.stringify(apiEndpoints) %>;
var apiServiceInfo = <%- JSON.stringify(apiServiceInfo) %>;

$(document).ready(function() {

    $("body").tooltip({ selector: '[data-toggle=tooltip]' });

    $("#api-service-title").html(apiServiceInfo.name);

    $("#api-service-desc").text(apiServiceInfo.description);

    if (apiServiceInfo.contentType == 'text') {
      insertTextSamples(apiServiceInfo);
    }
    else if (apiServiceInfo.contentType == 'image') {
        insertImageSamples(apiServiceInfo);
    }

});

$( "#analysisForm" ).submit(function( event ) {

  // Stop form from submitting normally
  event.preventDefault();

  var $form = $(this);

  var dataContents;
  var displayDataContents;
  if (apiServiceInfo.contentType == 'text') {
      var gRecaptchaResponse = $("#g-recaptcha-response").val();

      var extraField = $form.find( "select[name='xtra']" ).val();
      extraField = extraField != undefined ? extraField : "no_data";

      var dataField = $form.find( "textarea[name='phrase']" );
       var phraseFieldContents = dataField.val();

       if (phraseFieldContents == undefined || phraseFieldContents.trim().length == 0) {
         //todo add error msg.
         console.log("Text empty or undefined.");
         alert("Weird. No text detected.");
         return;
       }
       phraseFieldContents = phraseFieldContents.trim();
       displayDataContents = phraseFieldContents;

       dataContents = {
           phrase: phraseFieldContents,
           xtra: extraField,
           gRecaptchaResponse: gRecaptchaResponse
       };
  }
  else if (apiServiceInfo.contentType == 'image') {

      dataContents = {
          image: imageToAnalyze
      };


      displayDataContents =   imageHTMLFromInfo(imageToAnalyze);

  }
  else {
      console.log("Unknown apiServiceInfo contentType.");
      alert("Unknown apiServiceInfo contentType.");
      return;
  }



  $("#resultsDiv").empty();
  const resultsNotesDiv = $("#resultsNotes");
  if (resultsNotesDiv.is(':visible')) { //at the beginning the div is hidden, so we don't toggle it
    resultsNotesDiv.fadeToggle(100);
  }

  // phraseField.val("");
  var resultText = " ";

  resultText += "<p><b>Data</b> <div class='alert alert-info text-center' role='alert'><i>&#8220;"+displayDataContents+"&#8221;</i></div><BR>";
  resultText += "<b>Scores</b><br>";
  resultText += "<table id='table-centered'>";
  resultText += "<thead>";
  resultText += "<tr style='border-bottom: 1px solid #444; padding-top: 3px; padding-bottom: 2px;'>";
  resultText += "<td width='30%' style='text-align:center; font-size:90%; font-weight: bold;'>API Name</td>";
  resultText += "<td width='30%' style='text-align:center; font-size:90%; font-weight: bold;'>Result</td>";
  resultText += "<td width='20%' style='text-align:center; font-size:90%; font-weight: bold;'>Total request time</td>";
  resultText += "<td width='20%' style='text-align:center; font-size:90%; font-weight: bold;'>API Time</td>";
  resultText += "</tr>";
  resultText += "</thead>";
  resultText += "<tbody>";


    for (key in apiList) {
      //necessary since ajax async calls defer and you end up having variables overwritten is used within the same context
      (function (position) {
        var apiInfo = apiList[position];
        var endpointPath = apiInfo.url;
        // $.post(endpointPath.url, {phrase: phraseFieldContents});
        var divname = apiInfo.api.id;
        var divRefName = "#"+divname;
        var divRefTotalTimeName = "#"+divname+"-tt";
        var divRefAPITimeName = "#"+divname+"-ta";
        var divRefTooltipName = "#"+divname+"-tc";

        var divJsonName = divname+"-json";
        var divJsonNameData = divname+"-json-data";
        var divRefNameClick = divname+"-click";
        var divRefNameArrow = divname+"-arrow";

        //we will use a random spinner time to avoid super-fast 'flashing' of the spinner. So the data will never appear faster than randonWait msec
        var randomWait = 1000 + (Math.random() * 1000);
        var sendDate = (new Date()).getTime();

        rowText = "";
        rowText += "<TR style='border-bottom: 1px solid #ddd; line-height: 32px;'><TD width='40%' style='text-align:left; font-size:80%;'><span id='"+divRefNameArrow+"' class='glyphicon glyphicon-triangle-right' aria-hidden='true'></span> <span class='"+divRefNameClick+" hoverArea'>"+apiInfo.api.name+"</span> </TD>";
        rowText += "<TD width='30%' style='text-align:center; font-size:80%;'><span id='"+divname+"' class='spinner'>"+spinnerHTML+"</span></TD>";
        rowText += "<TD width='15%' style='text-align:center; font-size:80%;'><span id='"+divname+"-tt'></span></TD>";
        rowText += "<TD width='15%' style='text-align:center; font-size:80%;'><span id='"+divname+"-ta'></span></TD></TR>";
        rowText += "<tr class='"+divJsonName+"' style='display:none;'><td colspan='4'><pre id='"+divJsonNameData+"'>loading...</pre></td></tr>";

        resultText += rowText;

        // console.log("calling "+apiInfo.url);

        $.ajax({
          type: "POST",
          async: true,
          dataType: "json",
          url: apiInfo.url,
          data: dataContents

        }).done(function(data) {
          console.log("done in post ("+position+") "+apiInfo.url);
          var receiveDate = (new Date()).getTime();
          var responseTimeMs = receiveDate - sendDate;

          sleep(randomWait).then(() => {
            $(divRefName).removeClass("spinner");

            $(divRefName).empty().append(""+data.result.score);

            $(divRefTotalTimeName).empty().append(""+responseTimeMs);
            $(divRefAPITimeName).empty().append(""+data.apiTime);

            $("#table-centered ."+divRefNameClick).click(function () {
              $(this).toggleClass('open');
              toggleVisibleRow(divname);
            });
            $("#table-centered #"+divRefNameArrow).click(function () {
              toggleVisibleRow(divname);
            });

            var resultObj = JSON.stringify(data.serverResponse, null, 4);
            var str = syntaxHighlight(resultObj);

            $("#"+divJsonNameData).html(str);
          })

        }).fail(function(data) {
          var receiveDate = (new Date()).getTime();
          var responseTimeMs = receiveDate - sendDate;

          $(divRefName).removeClass("spinner");

          $(divRefName).empty().append('Error: could not connect to <br/>' + endpointPath + '. Please try again later. <br/>');

          console.error('Error connecting to: ' + endpointPath);
          var failError = {
            api: { log: endpointPath },
            data: { log: JSON.stringify(data) },
            totalTime: { log: responseTimeMs}
          };
          console.table(failError);

        });
      })(key);
    }

    resultText += "</tbody>";
    resultText += "</table>";
    $("#resultsDiv").append(resultText) ;
    resultsNotesDiv.fadeToggle(100);

});

   </script>

</body>
</html>
